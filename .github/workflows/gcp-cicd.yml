name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  BASE_VERSION: "v0.00.1"
  FRONTEND_IMAGE: asia-south1-docker.pkg.dev/silken-oxygen-454215-v6/microservices-demo/frontend-service
  ORDER_IMAGE: asia-south1-docker.pkg.dev/silken-oxygen-454215-v6/microservices-demo/order-service
  USER_IMAGE: asia-south1-docker.pkg.dev/silken-oxygen-454215-v6/microservices-demo/user-service
  GKE_CLUSTER_NAME: my-gke-cluster
  GKE_CLUSTER_ZONE: asia-south1
  GKE_PROJECT_ID: silken-oxygen-454215

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          mv sonar-scanner-4.8.0.2856-linux sonar-scanner
          echo "$PWD/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Increment Version
        id: version
        run: |
          if [[ -f version.txt ]]; then
            CURRENT_VERSION=$(cat version.txt)
          else
            CURRENT_VERSION="${{ env.BASE_VERSION }}"
          fi

          CURRENT_VERSION="${CURRENT_VERSION#v}"
          VERSION_PARTS=(${CURRENT_VERSION//./ })
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${NEW_PATCH}"

          echo $VERSION > version.txt
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          git config --global user.name "Mokadi surya Prasad"
          git config --global user.email "suryapasad.m@tcs.com"
          git add version.txt
          git commit -m "Increment version to $VERSION" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/mokadi-suryaprasad/GCP-DevOps-CICD-Pipeline.git HEAD:main

      - name: Build and test React frontend
        working-directory: frontend
        run: |
          npm install
          npm run build || true

      - name: SonarQube Scan - Frontend
        working-directory: frontend
        run: |
          sonar-scanner \
            -Dsonar.projectKey=frontend-service \
            -Dsonar.sources=. \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Build and test Java backend
        working-directory: user-service
        run: mvn clean test package

      - name: SonarQube Scan - User Service
        working-directory: user-service
        run: |
          sonar-scanner \
            -Dsonar.projectKey=user-service \
            -Dsonar.sources=. \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Build and test Python backend
        working-directory: order-service
        run: |
          pip install -r requirements.txt
          pytest || true

      - name: SonarQube Scan - Order Service
        working-directory: order-service
        run: |
          sonar-scanner \
            -Dsonar.projectKey=order-service \
            -Dsonar.sources=. \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-build-scan:
    runs-on: ubuntu-latest
    needs: build-test-analyze
    env:
      VERSION: ${{ needs.build-test-analyze.outputs.version }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Decrypt GCP Service Account Key
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > $HOME/gcp-service-account.json

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet

      - name: Build Docker images
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }} ./frontend
          docker build -t ${{ env.USER_IMAGE }}:${{ env.VERSION }} ./user-service
          docker build -t ${{ env.ORDER_IMAGE }}:${{ env.VERSION }} ./order-service

      - name: Scan Docker images with Trivy - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}

      - name: Scan Docker images with Trivy - User Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.USER_IMAGE }}:${{ env.VERSION }}

      - name: Scan Docker images with Trivy - Order Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ORDER_IMAGE }}:${{ env.VERSION }}

      - name: Push Docker images to Artifact Registry
        run: |
          docker push ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
          docker push ${{ env.USER_IMAGE }}:${{ env.VERSION }}
          docker push ${{ env.ORDER_IMAGE }}:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-scan
    env:
      VERSION: ${{ needs.build-test-analyze.outputs.version }}
    steps:
      - name: Checkout Helm chart repository
        uses: actions/checkout@v3
        with:
          repository: your-username/your-helm-repo
          token: ${{ secrets.GH_PAT }}
          path: helm-repo

      - name: Update Helm values.yaml with new image tags
        run: |
          cd helm-repo
          sed -i "s|frontend.image:.*|frontend.image: ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}|" values.yaml
          sed -i "s|userService.image:.*|userService.image: ${{ env.USER_IMAGE }}:${{ env.VERSION }}|" values.yaml
          sed -i "s|orderService.image:.*|orderService.image: ${{ env.ORDER_IMAGE }}:${{ env.VERSION }}|" values.yaml

      - name: Commit and push updated Helm chart
        run: |
          cd helm-repo
          git config --global user.name "Mokadi surya Prasad"
          git config --global user.email "mspr9773@gmail.com"
          git add values.yaml
          git commit -m "Update Helm chart with image tag ${{ env.VERSION }}" || echo "No changes"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/your-username/your-helm-repo.git HEAD:main

      - name: Wait for ArgoCD sync and app deployment
        run: |
          echo "Waiting for ArgoCD to sync and deploy changes..."
          sleep 90

      - name: Run OWASP ZAP DAST Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://your-app-domain.com'
          token: ${{ secrets.GH_PAT }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
